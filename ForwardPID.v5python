{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_motor_back = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nleft_motor_middle = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nleft_motor_front = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nright_motor_back = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\nright_motor_middle = Motor(Ports.PORT5, GearSetting.RATIO_18_1, True)\nright_motor_front = Motor(Ports.PORT6, GearSetting.RATIO_18_1, True)\ncontroller_1 = Controller(PRIMARY)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:      1/8/2024\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n#Made By: Anderson R.\n\n# Library imports\nfrom vex import *\n\n#Make sure to change the ports\n#READ: Set kd and kp to small values or even 0, then start testing\n\n#Values will be calibrated\nglobal kd\nglobal kp\nkd = 1\nkp = 1\n\n#Set the Wheel data\nwheel_circumference = 260;\ndegrees_per_rotation = 360;\nglobal distance_per_degree\n\n#distance that it traveled for each degree the wheel rotated\ndistance_per_degree = wheel_circumference / degrees_per_rotation;\n\n#In MM\nglobal distancee\ndistancee = 1000 \n\n# Begin project code\n\n#Might Change\nleft_motor_back.set_velocity(0, PERCENT)\nleft_motor_middle.set_velocity(0, PERCENT)\nleft_motor_front.set_velocity(0, PERCENT)\n\nright_motor_back.set_velocity(0, PERCENT)\nright_motor_middle.set_velocity(0, PERCENT)\nright_motor_front.set_velocity(0, PERCENT)\n\n\ndef forward_pid(distance):\n    #This fuction moves the robot;\n    #motor speed = error * kp * (â–³error/time) * kd;\n    old_error = 0\n    brain.timer.clear();\n\n    left_motor_back.spin(FORWARD)\n    left_motor_middle.spin(FORWARD)\n    left_motor_front.spin(FORWARD)\n    right_motor_back.spin(FORWARD)\n    right_motor_middle.spin(FORWARD)\n    right_motor_front.spin(FORWARD)\n\n    #Remember to change the true until the bot has stopped\n    while True:\n        distance_traveled = distance_traveled_calc()\n        error = distancee - distance_traveled;\n        error_change = error - old_error;\n        old_error = error;\n\n        #Get the time\n        time_passed = float(brain.timer.time(SECONDS));\n        time_passed = time_passed / 1000;\n\n        #PID calculation (Nightmare)\n        motor_speed = error * kp * (error_change / time_passed) * kd;\n\n        #Cap the max and min speed %\n        if motor_speed > 100:\n            motor_speed = 100;\n        elif motor_speed < -100:\n            motor_speed = -100;\n\n        #High Temp Check\n        if left_motor_back.temperature(PERCENT) >= 90 or left_motor_front.temperature(PERCENT) >= 90 or left_motor_middle.temperature(PERCENT) >= 90:\n            controller_1.screen.print(\"Left Wheels Overheating, it is highly recommended to let it cool!\")\n            brain.screen.print(\"Left Wheels Overheating, it is highly recommended to let it cool!\")\n        elif right_motor_back.temperature(PERCENT) >= 90 or right_motor_front.temperature(PERCENT) >= 90 or right_motor_middle.temperature(PERCENT) >= 90:\n            controller_1.screen.print(\"Right Wheels Overheating, it is highly recommended to let it cool!\")\n            brain.screen.print(\"Right Wheels Overheating, it is highly recommended to let it cool!\")\n\n        #Set the speed\n        left_motor_back.set_velocity(motor_speed, PERCENT)\n        left_motor_middle.set_velocity(motor_speed, PERCENT)\n        left_motor_front.set_velocity(motor_speed, PERCENT)\n\n        right_motor_back.set_velocity(motor_speed, PERCENT)\n        right_motor_middle.set_velocity(motor_speed, PERCENT)\n        right_motor_front.set_velocity(motor_speed, PERCENT)\n\n        #Loop Ender - might need to fix\n        if distance_traveled == distancee:\n            break;\n\n\ndef distance_traveled_calc():\n    left_front = left_motor_front.position(DEGREES);\n    left_middle = left_motor_middle.position(DEGREES);\n    left_back = left_motor_back.position(DEGREES);\n\n    right_front = right_motor_front.position(DEGREES);\n    right_middle = right_motor_middle.position(DEGREES);\n    right_back = right_motor_back.position(DEGREES);\n\n    average = left_front + left_middle + left_back + right_front + right_middle + right_back;\n    average = average / 6;\n    return (average * distance_per_degree)","textLanguage":"python","rconfig":[{"port":[1],"name":"left_motor_back","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"}},{"port":[2],"name":"left_motor_middle","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"}},{"port":[3],"name":"left_motor_front","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"}},{"port":[4],"name":"right_motor_back","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"}},{"port":[5],"name":"right_motor_middle","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"}},{"port":[6],"name":"right_motor_front","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"}},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"}}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.5","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}